name: Build wheels

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest

  generate_wheels_matrix:
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Install cibuildwheel and pypyp
        run: |
          pipx install cibuildwheel==2.22.0
          pipx install pypyp==1.2.0
          pipx install "mypy==1.14.0"
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --config-file=cibuildwheel.toml --print-build-identifiers --platform linux . \
              | pyp 'json.dumps({"only": x, "os": "ubuntu-latest"})' \
              && cibuildwheel --config-file=cibuildwheel.toml --print-build-identifiers --platform macos . \
              | pyp 'json.dumps({"only": x, "os": "macos-latest"})' \
              && cibuildwheel --config-file=cibuildwheel.toml --print-build-identifiers --platform windows . \
              | pyp 'json.dumps({"only": x, "os": "windows-latest"})'
            } | pyp 'json.dumps(list(map(json.loads, lines)))'
          )
          echo "include=$MATRIX" | tee -a $GITHUB_OUTPUT
        env:
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_PLATFORM: linux

  build_wheels:
    name: Build ${{ matrix.only }}
    needs: [generate_wheels_matrix, tests]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate_wheels_matrix.outputs.include) }}
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: pypa/cibuildwheel@v2.22.0
        with:
          config-file: cibuildwheel.toml
          package-dir: .
          only: ${{ matrix.only }}
      - uses: actions/upload-artifact@v4.5.0
        with:
          name: dist-${{ matrix.only }}
          path: ./wheelhouse/*.whl
          overwrite: true

  build_sdist_python_wheel:
    name: sdist and python wheel
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-python@v5.3.0
        name: Install Python
        with:
          python-version: "3.9"
      - name: Build sdist and wheel
        run: |
          python -m pip install --upgrade setuptools build "mypy==1.14.0"
          python -m build
      - uses: actions/upload-artifact@v4.5.0
        with:
          name: dist
          path: |
            dist/*.whl
            dist/*.tar.gz

  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/rsv
    permissions:
      id-token: write
    steps:
      - name: Get packages
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Filter valid packages
        run: |
          pip install wheel
          mkdir -p valid_packages
          
          find artifacts -name '*.whl' | while read whl; do
            platform_valid=false
            
            if echo "$whl" | grep -q 'linux'; then
              if wheel tags "$whl" | grep -q 'manylinux'; then
                platform_valid=true
              fi
            elif echo "$whl" | grep -q 'macosx'; then
              if wheel tags "$whl" | grep -q 'macosx'; then
                platform_valid=true
              fi
            elif echo "$whl" | grep -q 'win_amd64'; then
              if wheel tags "$whl" | grep -q 'win_amd64'; then
                platform_valid=true
              fi
            fi

            if $platform_valid; then
              echo "Valid wheel: $whl"
              cp "$whl" valid_packages/
            else
              echo "Removing invalid wheel: $whl"
              rm "$whl"
            fi
          done

          find artifacts -name '*.tar.gz' -exec cp {} valid_packages/ \;

          echo "Valid packages to upload:"
          ls -la valid_packages/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.3
        with:
          packages-dir: valid_packages
          skip-existing: true
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

    needs: [build_wheels, build_sdist_python_wheel]